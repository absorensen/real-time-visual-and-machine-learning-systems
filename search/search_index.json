{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Real-Time Visual and Machine Learning Systems","text":"<p>An upcoming course which will be based on this material. Lightning icons created by Freepik - Flaticon</p>"},{"location":"#recommended-prerequisites","title":"Recommended Prerequisites","text":"<p>High Performance Computing Compute Graphics and/or Computer Vision and/or Deep Learning and/or Advanced Deep Learning in Computer Vision</p>"},{"location":"#target-audience","title":"Target Audience","text":"<p>M.Sc. students with an interest in systems programming, especially if they are interested in deep learning, computer graphics, computer vision, image analysis or signal processing.</p> <p>PhD students who need to learn about performance and real-time systems. If they don't have previous experience in C++ or Rust they might need to spend some time preparing.</p>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<p>A student who has met the objectives of the course will be able to:</p> <ul> <li>Program using the Rust language and the WGPU API.</li> <li>Describe how computational graphs work.</li> <li>Describe how virtualized memory hierarchies work.</li> <li>Describe how a GPU works and how it fits in the memory hierarchy.</li> <li>Describe basic concepts in smart pointers, graph representations and garbage collectors.</li> <li>Give an overview of core concepts in concurrency.</li> <li>Explain input events and event-based processing.</li> <li>Explain integers and bitwise operations as well as floats and precision.</li> <li>Perform performance profiling and optimization of complex heterogeneous systems.</li> <li>Analyze cases relevant to the students' specialization.</li> <li>Choose the right tools presented in the course for implementing their own project.</li> <li>Programming, presenting and analyzing the students' own real-time system.</li> </ul>"},{"location":"#evaluation","title":"Evaluation","text":"<p>All work must be done alone, but it is recommended to talk with other students and the teacher.</p> <ul> <li>2 Hand-ins</li> <li>Presentation on Demo Day of a real-time system</li> <li>Final report on the design, process and implementation of the real-time system</li> </ul>"},{"location":"#course-work","title":"Course work","text":"<p>Aside from reading and listening:  </p> <ul> <li>Rudimentary Rust exercises</li> <li>Paper and pen exercise</li> <li>HAND-IN - Coding - memory hierarchies and GPU's</li> <li>HAND-IN - Analysis - Analysing a code template and minimum 3 points from a list of articles</li> <li>Inference exercise</li> <li>Analysis/presentation/discussion exercise. The student will choose a use case, analyze it, present it to a group and then discuss it  </li> <li>Try a profiler with a use case</li> <li>HAND-IN &amp; DEMO - Significant programming project - presentation on demo day and report hand-in about the product and the process</li> </ul>"},{"location":"#schedule","title":"Schedule","text":"<p>Location: Building 321, room 232 at DTU</p> Date Topics 26/10/23 Introduction to the course  Introduction to Rust  Read all of level 1 and 2  Install and run framework  Rudimentary Rust exercises 2/11/23 Read level 3 for modules 0 and 1  Memory Hierarchies and computational graphs  Pen and Paper exercises 9/11/23 Memory Hierarchies and computational graphs  Coding Exercise/Hand-in 16/11/23 Read level 3 for module 2  Parallelization  Analysis Exercise/Hand-in 23/11/23 Parallelization  Analysis Exercise/Hand-in continued 30/11/23 Read level 3 for modules 3 and 4  Types  Introduction to Profiling and Performance Use Cases  Inference exercise 7/12/23 Introduction to projects  Exercise / Group discussions of cases 2/1/24 Tips and tricks for real-time systems  Introduction to projects  Choosing projects  Programming 3/1/24 Programming 4/1/24 Programming 5/1/24 Programming 8/1/24 Programming 9/1/24 Programming 10/1/24 Programming 11/1/24 Programming  Demo day"}]}