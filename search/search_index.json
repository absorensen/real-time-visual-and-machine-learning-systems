{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Real-Time Visual and Machine Learning Systems","text":"<p>An upcoming course which will be based on this material. Lightning icons created by Freepik - Flaticon .</p>"},{"location":"#recommended-prerequisites","title":"Recommended Prerequisites","text":"<p>One or more of the following: High Performance Computing Compute Graphics Computer Vision Deep Learning Advanced Deep Learning in Computer Vision </p>"},{"location":"#target-audience","title":"Target Audience","text":"<p>M.Sc. students with an interest in systems programming, especially if they are interested in deep learning, computer graphics, computer vision, image analysis or signal processing.</p> <p>PhD students who need to learn about performance and real-time systems. If they don't have previous experience in C++ or Rust they may benefit from spending some time preparing by reading module 0 and the material from Rust itself.</p>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<p>A student who has met the objectives of the course will be able to:</p> <ul> <li>Program using the Rust language and the WGPU API.</li> <li>Describe how computational graphs work.</li> <li>Describe how virtualized memory hierarchies work.</li> <li>Describe how a GPU works and how it fits in the memory hierarchy.</li> <li>Describe basic concepts in smart pointers, graph representations and garbage collectors.</li> <li>Give an overview of core concepts in concurrency.</li> <li>Explain input events and event-based processing.</li> <li>Explain integers and bitwise operations as well as floats and precision.</li> <li>Perform performance profiling and optimization of complex heterogeneous systems.</li> <li>Analyze cases relevant to the students' specialization.</li> <li>Choose the right tools presented in the course for implementing their own project.</li> <li>Programming, presenting and analyzing the students' own real-time system.</li> </ul>"},{"location":"#evaluation","title":"Evaluation","text":"<p>All work must be done alone, but it is recommended to talk about the problems.</p> <ul> <li>Coding - Memory hierarchies and GPU's</li> <li>Analysis - Analysing a code template and minimum 3 points from a list of articles</li> <li>Programming project - presentating a functoning real-time system and hand-in of the product and a log book of the development process</li> </ul>"},{"location":"#course-work","title":"Course work","text":"<p>Aside from reading and listening:  </p> <ul> <li>Rudimentary Rust exercises</li> <li>Paper and pen exercises about memory</li> <li>Types coding exercises</li> <li>Setup one or more profilers and explore them</li> <li>Analysis, presentation and discussion exercise. Choose a use case, analyze it, present it in groups and discuss</li> </ul>"},{"location":"#schedule","title":"Schedule","text":"<p>Work in progress</p> <p>The schedule below was the way the course was taught while the underlying material was still being written. It does not necessarily reflect the way and order in which it should be taught. You can create your own view on the underlying material and choose your exercises and order. It also became apparent while teaching that another day was needed for teaching GPU programming and more material was written for it. The concept of levels has also been removed from the material.</p> <p>Location: Building 321, room 232 at DTU The lectures before New Years will be from 13-17 The project work after New Years will be all day, but you can come and go as you'd like The course ends with a demo day where you can show off your hard work  </p> Date Prep Topics Lecture 26/10/23 Read level 1 and 2 for all modules  Install and run framework  Introduction to the course  Introduction to Rust  Rudimentary Rust exercises Link 2/11/23 Read level 3 for modules 0 and 1 Memory Hierarchies and computational graphs  Pen and Paper exercises Link 9/11/23 Reread GPU and computational graph sections Memory Hierarchies and computational graphs  Coding Hand-in Link 16/11/23 Read level 2 &amp; 3 for module 2, s0 to s4 Concurrency  Analysis Hand-in, m4::e0 and m4::e1 Link 23/11/23 Read level 2 &amp; 3 for module 2, s5 to s9 Concurrency Link 30/11/23 Read level 2 &amp; 3 for modules 3 and 5 Types  Introduction to Profiling and Performance Use Cases  Types exercise Profiler exercise Link 7/12/23 Read module 4 Introduction to real-time systems  Introduction to projects  Approval of projects Link 2/1/24 Project Work 3/1/24 Project Work 4/1/24 Project Work 5/1/24 Project Work 8/1/24 Project Work 9/1/24 Project Work 10/1/24 Project Work 11/1/24 Project Work  Demo day"}]}